# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-A-lU79bZpvOEJKb9EWaQltqf0cKnxLj
"""

from pororo import Pororo
from dataclasses import dataclass
import copy

pos = Pororo(task="pos", lang="ko")

# 각 칸의 정보를 담을 dataclass
@dataclass
class Slot:
    figure:str = None
    color:str = None


def count_tag(tags, obj):
  val = 0
  for tag in tags:
    if obj in tag:
      val += 1
  return val


def create_grid():
  grid = []
  for i in range(9):
    grid.append(Slot())
  return grid


def add_case(cases, case):
  for i in range(len(case)):
    for slot in case[i+1:]:
      if case[i].color != None and case[i].figure != None and case[i] == slot:
        return False
  for onecase in cases:
    if case == onecase:
      return False
  cases.append(case)
  return True


def arrange(inputs, possibility):
  for log in inputs:
    newcase = []
    if log[1] == []:
      if len(possibility) == 0:
        for i in range(9):
          grid = create_grid()
          grid[i].color = log[0][0]
          grid[i].figure = log[0][1]
          add_case(newcase, grid)
      else:
        for case in possibility:
          for i in range(9):
            if (case[i].color == None or log[0][0] == None or case[i].color == log[0][0]) and (
                    case[i].figure == None or log[0][1] == None or case[i].figure == log[0][1]):
              grid = copy.deepcopy(case)
              if log[0][0] != None:
                grid[i].color = log[0][0]
              if log[0][1] != None:
                grid[i].figure = log[0][1]
              add_case(newcase, grid)

    elif log[2] == [None, None]:
      _position = [0, 1, 2, 3, 4, 5, 6, 7, 8]
      if "up" in log[1]:
        _position = [i for i in _position if i in [0, 1, 2]]
      if "down" in log[1]:
        _position = [i for i in _position if i in [6, 7, 8]]
      if "left" in log[1]:
        _position = [i for i in _position if i in [0, 3, 6]]
      if "right" in log[1]:
        _position = [i for i in _position if i in [2, 5, 8]]
      if "center" in log[1]:
        if len(log[1]) == 1:
          _position = [4]
        else:
          _position = [i for i in _position if i not in [0, 2, 6, 8]]

      if len(possibility) == 0:
        for i in _position:
          grid = create_grid()
          grid[i].color = log[0][0]
          grid[i].figure = log[0][1]
          add_case(newcase, grid)
      else:
        for case in possibility:
          for i in _position:
            if (case[i].color == None or log[0][0] == None or case[i].color == log[0][0]) and (
                    case[i].figure == None or log[0][1] == None or case[i].figure == log[0][1]):
              grid = copy.deepcopy(case)
              if log[0][0] != None:
                grid[i].color = log[0][0]
              if log[0][1] != None:
                grid[i].figure = log[0][1]
              add_case(newcase, grid)
    else:
      _position = [0, 1, 2, 3, 4, 5, 6, 7, 8]
      if "up" in log[1]:
        _position = [i for i in _position if i not in [0, 1, 2]]
      if "down" in log[1]:
        _position = [i for i in _position if i not in [6, 7, 8]]
      if "left" in log[1]:
        _position = [i for i in _position if i not in [0, 3, 6]]
      if "right" in log[1]:
        _position = [i for i in _position if i not in [2, 5, 8]]

      if len(possibility) == 0:
        for i in _position:
          grid = create_grid()
          grid[i].color = log[2][0]
          grid[i].figure = log[2][1]
          _subposition = []
          if "up" in log[1]:
            k = i - 3
            while k >= 0:
              _subposition.append(k)
              k -= 3
          if "down" in log[1]:
            k = i + 3
            while k < 9:
              _subposition.append(k)
              k += 3
          if "left" in log[1]:
            k = i - 1
            while k % 3 != 2:
              _subposition.append(k)
              k -= 1
          if "right" in log[1]:
            k = i + 1
            while k % 3 != 0:
              _subposition.append(k)
              k += 1
          for j in _subposition:
            grid2 = copy.deepcopy(grid)
            grid2[j].color = log[0][0]
            grid2[j].figure = log[0][1]
            add_case(newcase, grid2)
      else:
        for case in possibility:
          for i in _position:
            if (case[i].color == None or log[2][0] == None or case[i].color == log[2][0]) and (
                    case[i].figure == None or log[2][1] == None or case[i].figure == log[2][1]):
              grid = copy.deepcopy(case)
              if log[2][0] != None:
                grid[i].color = log[2][0]
              if log[2][1] != None:
                grid[i].figure = log[2][1]

              _subposition = []
              if "up" in log[1]:
                k = i - 3
                while k >= 0:
                  _subposition.append(k)
                  k -= 3
              if "down" in log[1]:
                k = i + 3
                while k < 9:
                  _subposition.append(k)
                  k += 3
              if "left" in log[1]:
                k = i - 1
                while k % 3 != 2:
                  _subposition.append(k)
                  k -= 1
              if "right" in log[1]:
                k = i + 1
                while k % 3 != 0:
                  _subposition.append(k)
                  k += 1
              for j in _subposition:
                if (grid[j].color == None or log[0][0] == None or grid[j].color == log[0][0]) and (
                        grid[j].figure == None or log[0][1] == None or grid[j].figure == log[0][1]):
                  grid2 = copy.deepcopy(grid)
                  if log[0][0] != None:
                    grid2[j].color = log[0][0]
                  if log[0][1] != None:
                    grid2[j].figure = log[0][1]
                  add_case(newcase, grid2)

    possibility = newcase

  return possibility


inputs = []

s = "위쪽 가운데에 하얀 동그라미가 있고 하얀 동그라미 아래에 붉은 원이 있다."

# 체크할 유의미한 형태소 dict
word_data = {('빨갛', 'VA'):['red', 'color'], ('붉', 'VA'):['red', 'color'], ('발갛', 'VA'):['red', 'color'], ('새빨갛', 'VA'):['red', 'color'], ('뻘겋', 'VA'):['red', 'color'], ('빨간', 'NNG'):['red', 'color'], ('빨강', 'NNG'):['red', 'color'], ('붉은', 'NNP'):['red', 'color'], ('적색', 'NNG'):['red', 'color'], 
             ('파랗', 'VA'):['blue', 'color'], ('푸르', 'VA'):['blue', 'color'], ('퍼렇', 'VA'):['blue', 'color'], ('새파랗', 'VA'):['blue', 'color'], ('시퍼렇', 'VA'):['blue', 'color'], ('파란', 'NNG'):['blue', 'color'], ('파랑', 'NNG'):['blue', 'color'], ('퍼런', 'NNG'):['blue', 'color'], ('청색', 'NNG'):['blue', 'color'], ('청', 'NNG'):['blue', 'color'],
             ('초록', 'NNG'):['green', 'color'], ('녹색', 'NNG'):['green', 'color'], 
             ('노랗', 'VA'):['yellow', 'color'], ('누렇', 'VA'):['yellow', 'color'], ('샛노랗', 'VA'):['yellow', 'color'], ('누르', 'VA'):['yellow', 'color'], ('황색', 'NNG'):['yellow', 'color'], ('노란', 'NNG'):['yellow', 'color'], ('노랑', 'NNG'):['yellow', 'color'], ('누런', 'NNG'):['yellow', 'color'], 
             ('주황', 'NNG'):['orange', 'color'], ('자황', 'NNG'):['orange', 'color'], ('귤색', 'NNG'):['orange', 'color'], ('감색', 'NNG'):['orange', 'color'], 
             ('보라', 'NNG'):['violet', 'color'], ('보랏', 'NNG'):['violet', 'color'], ('자색', 'NNG'):['violet', 'color'], ('자주', 'NNG'):['violet', 'color'], ('자줏', 'NNG'):['violet', 'color'], 
             ('하얗', 'VA'):['white', 'color'], ('허옇', 'VA'):['white', 'color'], ('희', 'VA'):['white', 'color'], ('하얀', 'NNG'):['white', 'color'], ('허연', 'NNG'):['white', 'color'], ('흰', 'NNG'):['white', 'color'], 
             ('까맣', 'VA'):['black', 'color'], ('새까맣', 'VA'):['black', 'color'], ('새카맣', 'VA'):['black', 'color'], ('검', 'VA'):['black', 'color'], ('검정', 'NNG'):['black', 'color'], 
             ('동그라미', 'NNG'):['circle', 'figure'], ('원', 'NNG'):['circle', 'figure'], ('원형', 'NNG'):['circle', 'figure'], 
             ('세모', 'NNG'):['tri', 'figure'], ('삼각', 'NNG'):['tri', 'figure'], 
             ('사각', 'NNG'):['rect', 'figure'], ('사변', 'NNG'):['rect', 'figure'], ('네', 'NNG'):['rect', 'figure'], ('네모', 'NNG'):['rect', 'figure'], 
             ('별', 'NNG'):['star', 'figure'], ('별표', 'NNG'):['star', 'figure'], ('별', 'MM'):['star', 'figure'], 
             ('하트', 'NNG'):['heart', 'figure'], 
             ('위', 'NNG'):['up', 'position'], ('윗', 'NNG'):['up', 'position'], ('꼭대기', 'NNG'):['up', 'position'], ('상', 'NNG'):['up', 'position'], ('상단', 'NNG'):['up', 'position'], ('상측', 'NNG'):['up', 'position'], 
             ('아래', 'NNG'):['down', 'position'], ('밑', 'NNG'):['down', 'position'], ('하단', 'NNG'):['down', 'position'], ('하측', 'NNG'):['down', 'position'], 
             ('왼', 'NNG'):['left', 'position'], ('좌', 'NNG'):['left', 'position'], ('좌편', 'NNG'):['left', 'position'], ('좌측', 'NNG'):['left', 'position'],
             ('오른', 'NNG'):['right', 'position'], ('우측', 'NNG'):['right', 'position'], ('우편', 'NNG'):['right', 'position'],
             ('가운데', 'NNG'):['center', 'position'],
             #('첫', 'MM'):['1', 'num'], ('한', 'MM'):['1', 'num'], ('하나', 'NR'):['1', 'num'], ('일', 'NR'):['1', 'num'], ('1', 'SN'):['1', 'num'], 
             #('두', 'MM'):['2', 'num'], ('이', 'NR'):['2', 'num'], ('둘', 'NR'):['2', 'num'], ('2', 'SN'):['2', 'num'], 
             ('고', 'EC'):['and', 'sign'], ('그리고', 'MAJ'):['and', 'sign'], ('와', 'JKB'):['and', 'sign'], ('와', 'JC'):['and', 'sign'],
             ('없', 'VA'):['not', 'sign'],
             ('있', 'VV'):['exist', 'sign'], ('있', 'VA'):['exist', 'sign'], ('위치', 'NNG'):['exist', 'sign'], ('자리', 'NNG'):['exist', 'sign'], ('존재', 'NNG'):['exist', 'sign']}

morphemes = pos(s)
print(morphemes)
tags = []

# 유의미한 형태소만 태그로 정리
for morpheme in morphemes:
  dic = word_data.get(morpheme)
  if dic:
    tags.append(dic)

print(tags)

tag_stack = []
sliced_tags = []
start = 0
for i in range(0, len(tags)):
  if tags[i][0] == 'and':
    sliced_tags.append(tags[start:i])
    start = i+1
if start < len(tags):
  sliced_tags.append(tags[start:len(tags)])

for taglist in sliced_tags:
  if max(count_tag(taglist, "color"), count_tag(taglist, "figure")) == 2 and count_tag(taglist, "position") > 0:
    _color = None
    _figure = None
    _position = []
    _countF = 0
    _input = [[], [], [], True]
    for tag in taglist:
      if (tag == ['not', 'sign']):
        _countF += 1
      if (tag[1] == "color"):
        if (_figure != None or _color != None):
          _input[0] = [_color, _figure]
          _figure = None
        _color = tag[0]
      if (tag[1] == "figure"):
        if (_figure != None):
          _input[0] = [_color, _figure]
          _color = None
        _figure = tag[0]
      if (tag[1] == "position"):
        if (_figure != None or _color != None):
          _input[2] = [_color, _figure]
          _figure = None
          _color = None
        _position.append(tag[0])
    if (_figure != None or _color != None):
      _input[0] = [_color, _figure]
    _input[1] = _position
    _input[3] = (_countF%2 == 0)
    inputs.append(_input)
  elif max(count_tag(taglist, "color"), count_tag(taglist, "figure")) == 1:
    _color = None
    _figure = None
    _position = []
    _countF = 0
    for tag in taglist:
      if (tag == ['not', 'sign']):
        _countF += 1
      if (tag[1] == "color"):
        _color = tag[0]
      if (tag[1] == "figure"):
        _figure = tag[0]
      if (tag[1] == "position"):
        _position.append(tag[0])
    inputs.append([[_color, _figure], _position, [None, None], (_countF%2 == 0)])
  else:
    print("Invalid Sentence")

print(inputs)

arrange(inputs, [])



for case in possibility:
  for i in range(3):
    print(case[i*3+0].color, case[i*3+0].figure, "\t", case[i*3+1].color, case[i*3+1].figure, "\t", case[i*3+2].color, case[i*3+2].figure)
  print()

print(len(possibility))

